import tkinter as tk
import threading
import time
import random
import keyboard
import customtkinter as ctk
import ctypes
from ctypes import wintypes

# ----------------------------------------------------------------
# 1) Define a "SafeIntVar" that won't crash on empty/invalid text
# ----------------------------------------------------------------
class SafeIntVar(tk.IntVar):
    """
    A subclass of tkinter.IntVar that gracefully handles
    empty or invalid string conversions, avoiding TclError.
    """
    def set(self, value):
        try:
            super().set(int(float(value)))
        except (ValueError, tk.TclError):
            pass

    def get(self):
        try:
            return super().get()
        except (ValueError, tk.TclError):
            return 0

# ----------------------------------------------------------------
# Windows API structures for sending mouse clicks
# ----------------------------------------------------------------
SendInput = ctypes.windll.user32.SendInput

PUL = ctypes.POINTER(ctypes.c_ulong)

class MOUSEINPUT(ctypes.Structure):
    _fields_ = [
        ("dx", wintypes.LONG),
        ("dy", wintypes.DWORD),
        ("mouseData", wintypes.DWORD),
        ("dwFlags", wintypes.DWORD),
        ("time", wintypes.DWORD),
        ("dwExtraInfo", PUL)
    ]

class INPUT(ctypes.Structure):
    class _I(ctypes.Union):
        _fields_ = [("mi", MOUSEINPUT)]
    _anonymous_ = ("i",)
    _fields_ = [
        ("type", wintypes.DWORD),
        ("i", _I)
    ]

# Constants for mouse events
INPUT_MOUSE = 0
MOUSEEVENTF_LEFTDOWN  = 0x0002
MOUSEEVENTF_LEFTUP    = 0x0004
MOUSEEVENTF_RIGHTDOWN = 0x0008
MOUSEEVENTF_RIGHTUP   = 0x0010

def send_mouse_click(button='left'):
    extra = ctypes.c_ulong(0)
    ii = INPUT(type=INPUT_MOUSE)

    if button == 'left':
        ii.mi.dwFlags = MOUSEEVENTF_LEFTDOWN
        SendInput(1, ctypes.byref(ii), ctypes.sizeof(ii))
        ii.mi.dwFlags = MOUSEEVENTF_LEFTUP
        SendInput(1, ctypes.byref(ii), ctypes.sizeof(ii))

    elif button == 'right':
        ii.mi.dwFlags = MOUSEEVENTF_RIGHTDOWN
        SendInput(1, ctypes.byref(ii), ctypes.sizeof(ii))
        ii.mi.dwFlags = MOUSEEVENTF_RIGHTUP
        SendInput(1, ctypes.byref(ii), ctypes.sizeof(ii))

    elif button == 'double':
        for _ in range(2):
            ii.mi.dwFlags = MOUSEEVENTF_LEFTDOWN
            SendInput(1, ctypes.byref(ii), ctypes.sizeof(ii))
            ii.mi.dwFlags = MOUSEEVENTF_LEFTUP
            SendInput(1, ctypes.byref(ii), ctypes.sizeof(ii))
            time.sleep(0.005)

# ----------------------------------------------------------------
# Additional helpers for getting/setting mouse position
# ----------------------------------------------------------------
class POINT(ctypes.Structure):
    _fields_ = [("x", wintypes.LONG), ("y", wintypes.LONG)]

def get_mouse_position():
    pt = POINT()
    ctypes.windll.user32.GetCursorPos(ctypes.byref(pt))
    return (pt.x, pt.y)

def set_cursor_position(x, y):
    ctypes.windll.user32.SetCursorPos(x, y)

# ----------------------------------------------------------------
# The main Bare Bones Auto Clicker class
# ----------------------------------------------------------------
class BareBonesAutoClicker:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("bare bones auto clicker")
        self.root.geometry("600x400")
        self.root.minsize(600, 400)  # Keep the minimum size

        # Use a custom icon if you have one
        try:
            self.root.iconbitmap("C:\\project\\mousepointer.ico")
        except:
            pass

        # Set theme and appearance
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("dark-blue")

        # State variables
        self.is_clicking = False       # Only used for "Click to Toggle"
        self.cps_var = SafeIntVar(value=11)
        self.hotkey = 'f8'
        self.click_type = ctk.StringVar(value='left')
        self.awaiting_rebind = False

        # Hotkey mode
        self.hotkey_mode = ctk.StringVar(value="Click to Toggle")

        # For random intervals
        self.random_intervals_var = ctk.BooleanVar(value=False)

        # For "Stop after X clicks" feature
        self.stop_after_enabled_var = ctk.BooleanVar(value=False)
        self.stop_after_count_var   = SafeIntVar(value=100)

        # For location-based clicking
        self.x_var = SafeIntVar(value=0)
        self.y_var = SafeIntVar(value=0)
        self.use_location_var = ctk.BooleanVar(value=False)

        # We will keep a single thread that always loops
        self.loop_thread = None
        self.keep_looping = True  # We'll set False when closing

        self._create_gui()
        self._setup_hotkey_for_click_toggle()  # Only for "Click to Toggle"

        # Start our main loop thread
        self.loop_thread = threading.Thread(target=self.click_loop, daemon=True)
        self.loop_thread.start()

    # ------------- UI Setup -------------
    def _create_gui(self):
        # Title frame
        title_frame = ctk.CTkFrame(self.root, fg_color="transparent")
        title_frame.pack(pady=10, padx=20, fill="x")

        title_label = ctk.CTkLabel(
            title_frame, text="bare bones auto clicker",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(side="left")

        # Main frame
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(pady=10, padx=20, fill="both", expand=True)

        # Controls frame (left side)
        controls_frame = ctk.CTkFrame(main_frame)
        controls_frame.pack(side="left", padx=10, fill="y")

        toggle_frame = ctk.CTkFrame(controls_frame)
        toggle_frame.pack(pady=10, fill="x")

        # "Start/Stop" button (only relevant for Click-to-Toggle)
        self.toggle_button = ctk.CTkButton(
            toggle_frame,
            text="Start Auto Clicker",
            font=ctk.CTkFont(size=16),
            height=50,
            fg_color="#1E8449",
            hover_color="#145A32",
            command=self.toggle_clicking
        )
        self.toggle_button.pack(side="left", expand=True, fill="x")

        # Hotkey frame
        hotkey_frame = ctk.CTkFrame(toggle_frame, fg_color="transparent")
        hotkey_frame.pack(side="right", padx=5)

        self.hotkey_label = ctk.CTkLabel(hotkey_frame, text=f"Hotkey: {self.hotkey}")
        self.hotkey_label.pack(side="top")

        # "Change Hotkey" button
        self.change_hotkey_btn = ctk.CTkButton(
            hotkey_frame,
            text="Change Hotkey",
            fg_color="#1E8449",
            hover_color="#145A32",
            command=self.rebind_hotkey,
            width=100
        )
        self.change_hotkey_btn.pack(side="top", pady=5)

        # Click Type label
        type_label = ctk.CTkLabel(controls_frame, text="Click Type")
        type_label.pack(pady=(10, 0))

        # Click Type dropdown
        self.type_menu = ctk.CTkOptionMenu(
            controls_frame,
            values=["left", "right", "double"],
            variable=self.click_type,
            fg_color="#1E8449",
            button_color="#145A32",
            button_hover_color="#0F3D1F"
        )
        self.type_menu.pack(pady=5, fill="x")

        # Hotkey Mode label
        mode_label = ctk.CTkLabel(controls_frame, text="Hotkey Mode")
        mode_label.pack(pady=(10, 0))

        # Hotkey Mode dropdown
        self.hotkey_mode_menu = ctk.CTkOptionMenu(
            controls_frame,
            values=["Click to Toggle", "Hold to Toggle"],
            variable=self.hotkey_mode,
            fg_color="#1E8449",
            button_color="#145A32",
            button_hover_color="#0F3D1F",
            command=self.on_hotkey_mode_change
        )
        self.hotkey_mode_menu.pack(pady=5, fill="x")

        # Settings frame (right side)
        settings_frame = ctk.CTkFrame(main_frame)
        settings_frame.pack(side="right", padx=10, fill="both", expand=True)

        cps_label = ctk.CTkLabel(settings_frame, text="Clicks per Second (CPS):")
        cps_label.pack(pady=(10, 0))

        self.cps_entry = ctk.CTkEntry(settings_frame, textvariable=self.cps_var)
        self.cps_entry.pack(pady=5, fill="x")

        slider_label = ctk.CTkLabel(settings_frame, text="Adjust CPS (1-60):")
        slider_label.pack(pady=(10, 0))

        self.interval_slider = ctk.CTkSlider(
            settings_frame,
            from_=1,
            to=60,
            variable=self.cps_var
        )
        self.interval_slider.pack(pady=5, fill="x")

        self.cps_var.trace_add("write", self.on_cps_var_changed)

        # Random intervals checkbox
        random_check = ctk.CTkCheckBox(
            settings_frame,
            text="Use Random Intervals",
            variable=self.random_intervals_var
        )
        random_check.pack(pady=5, fill="x")

        # Frame for "Stop after X clicks"
        stop_after_frame = ctk.CTkFrame(settings_frame, fg_color="transparent")
        stop_after_frame.pack(pady=5, fill="x")

        self.stop_after_checkbox = ctk.CTkCheckBox(
            stop_after_frame,
            text="Stop after",
            variable=self.stop_after_enabled_var
        )
        self.stop_after_checkbox.pack(side="left")

        self.stop_after_entry = ctk.CTkEntry(
            stop_after_frame,
            textvariable=self.stop_after_count_var,
            width=50
        )
        self.stop_after_entry.pack(side="left", padx=5)

        stop_after_label = ctk.CTkLabel(stop_after_frame, text="clicks")
        stop_after_label.pack(side="left")

        # --- LOCATION CLICK SECTION ---
        location_frame = ctk.CTkFrame(settings_frame, fg_color="transparent")
        location_frame.pack(pady=(15, 5), fill="x")

        loc_label = ctk.CTkLabel(location_frame, text="Location (x,y):")
        loc_label.pack(anchor="w")

        xy_frame = ctk.CTkFrame(location_frame, fg_color="transparent")
        xy_frame.pack(pady=3, fill="x")

        x_entry_label = ctk.CTkLabel(xy_frame, text="X:")
        x_entry_label.pack(side="left", padx=(0,5))
        self.x_entry = ctk.CTkEntry(xy_frame, textvariable=self.x_var, width=70)
        self.x_entry.pack(side="left", padx=(0,10))

        y_entry_label = ctk.CTkLabel(xy_frame, text="Y:")
        y_entry_label.pack(side="left", padx=(0,5))
        self.y_entry = ctk.CTkEntry(xy_frame, textvariable=self.y_var, width=70)
        self.y_entry.pack(side="left", padx=(0,10))

        loc_control_frame = ctk.CTkFrame(location_frame, fg_color="transparent")
        loc_control_frame.pack(pady=(3,5), anchor="w")

        self.set_location_btn = ctk.CTkButton(
            loc_control_frame,
            text="Set Location (5s)",
            fg_color="#1E8449",
            hover_color="#145A32",
            command=self.set_location,
            width=80
        )
        self.set_location_btn.pack(side="left", padx=(0,10))

        self.use_location_checkbox = ctk.CTkCheckBox(
            loc_control_frame,
            text="Use Location",
            variable=self.use_location_var
        )
        self.use_location_checkbox.pack(side="left")

        # Status label at the bottom
        self.status_label = ctk.CTkLabel(
            self.root,
            text="Status: Stopped",
            font=ctk.CTkFont(size=14)
        )
        self.status_label.pack(pady=10)

        # On close, stop the loop
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def on_cps_var_changed(self, *args):
        val = self.cps_var.get()
        if val < 1:
            self.cps_var.set(1)
        elif val > 60:
            self.cps_var.set(60)

    def on_close(self):
        """
        Cleanly stop the background thread and then destroy the window.
        """
        self.keep_looping = False  # Tells our loop thread to exit
        self.root.destroy()

    # ------------- Hotkey Setup for "Click to Toggle" -------------
    def _setup_hotkey_for_click_toggle(self):
        """
        Sets up a hotkey ONLY for "Click to Toggle" mode. 
        For "Hold to Toggle," we do real-time checks inside the loop.
        """
        # Remove any old hotkey
        try:
            keyboard.remove_hotkey(self.hotkey)
        except KeyError:
            pass

        # If the user chooses "Click to Toggle," add it
        if self.hotkey_mode.get() == "Click to Toggle":
            keyboard.add_hotkey(self.hotkey, self.toggle_clicking)

    def on_hotkey_mode_change(self, *args):
        mode = self.hotkey_mode.get()
        # Reset the Start/Stop button if we switch modes
        self.stop_clicking()

        # Re-setup the hotkey if "Click to Toggle"
        self._setup_hotkey_for_click_toggle()

        # If "Hold to Toggle," we disable the start/stop button
        # If "Click to Toggle," enable it
        if mode == "Hold to Toggle":
            self.toggle_button.configure(state="disabled")
            self.status_label.configure(text="Status: (Hold hotkey to click)")
        else:
            self.toggle_button.configure(state="normal")
            self.status_label.configure(text="Status: Stopped")

    # ------------- Start/Stop Clicking (for Click-to-Toggle) -------------
    def start_clicking(self):
        if self.is_clicking:
            return  # Already started

        self.is_clicking = True
        self.toggle_button.configure(
            text="Stop Auto Clicker",
            fg_color="#145A32",
            hover_color="#0F3D1F"
        )
        self.status_label.configure(text="Status: Running")
        self._set_controls_state(normal=False)

    def stop_clicking(self):
        if not self.is_clicking:
            return  # Already stopped

        self.is_clicking = False
        self.toggle_button.configure(
            text="Start Auto Clicker",
            fg_color="#1E8449",
            hover_color="#145A32"
        )
        self.status_label.configure(text="Status: Stopped")
        self._set_controls_state(normal=True)

    def toggle_clicking(self):
        if self.awaiting_rebind:
            return
        if self.is_clicking:
            self.stop_clicking()
        else:
            self.start_clicking()

    # ------------- Rebind Hotkey -------------
    def rebind_hotkey(self):
        # Remove old hotkey
        try:
            keyboard.remove_hotkey(self.hotkey)
        except KeyError:
            pass

        self.hotkey_label.configure(text="Press new hotkey...")
        self.awaiting_rebind = True

        threading.Thread(target=self.wait_for_new_hotkey, daemon=True).start()

    def wait_for_new_hotkey(self):
        new_key = keyboard.read_key(suppress=True)
        # If user mistakenly uses mouse, revert
        if new_key == 'left mouse':
            self.hotkey_label.configure(text=f"Hotkey: {self.hotkey}")
        else:
            self.hotkey = new_key
            self.hotkey_label.configure(text=f"Hotkey: {self.hotkey}")

        self.awaiting_rebind = False
        # Re-setup if current mode is Click to Toggle
        if self.hotkey_mode.get() == "Click to Toggle":
            self._setup_hotkey_for_click_toggle()

    # ------------- Location Setting -------------
    def set_location(self):
        threading.Thread(target=self._background_set_location, daemon=True).start()

    def _background_set_location(self):
        self.root.withdraw()  # hide window
        time.sleep(5)
        x, y = get_mouse_position()
        self.root.deiconify()

        self.x_var.set(x)
        self.y_var.set(y)

    # ------------- Main Clicking Loop (Continuous) -------------
    def click_loop(self):
        """
        A single background thread that runs the entire time the app is open.
        It handles BOTH modes:
          - "Click to Toggle": clicks if self.is_clicking is True
          - "Hold to Toggle": clicks if keyboard.is_pressed(self.hotkey)
        """
        click_count = 0  # For "Stop after X clicks"

        while self.keep_looping:
            mode = self.hotkey_mode.get()

            # Determine if we should be clicking this instant
            if mode == "Click to Toggle":
                can_click = self.is_clicking
            else:  # "Hold to Toggle"
                can_click = keyboard.is_pressed(self.hotkey)

            if can_click:
                # Actually do one click
                if self.use_location_var.get():
                    set_cursor_position(self.x_var.get(), self.y_var.get())

                send_mouse_click(self.click_type.get())
                click_count += 1

                # Check "Stop after X clicks" if in "Click to Toggle"
                # (Typically "Hold to Toggle" doesn't make sense with 'stop after X'
                #  but we can apply it anyway—once you hit the limit, we stop.)
                if self.stop_after_enabled_var.get():
                    limit = self.stop_after_count_var.get()
                    if limit > 0 and click_count >= limit:
                        # If in "Click to Toggle," just stop
                        # If in "Hold to Toggle," we can forcibly ignore future clicks
                        if mode == "Click to Toggle":
                            self.stop_clicking()
                        # For "Hold to Toggle," let's also forcibly skip further clicks
                        click_count = 0  # reset or handle how you prefer
                        time.sleep(0.2)
                        continue

                # Calculate interval for next click
                cps = self.cps_var.get()
                base_interval = 1.0 / float(cps)

                if self.random_intervals_var.get():
                    low = base_interval * 0.7
                    high = base_interval * 1.3
                    interval = random.uniform(low, high)
                else:
                    interval = base_interval

                time.sleep(interval)
            else:
                # Not clicking right now; short sleep so we don't hog CPU
                time.sleep(0.01)

        # Thread is exiting
        print("Clicking loop exited.")

    def _set_controls_state(self, normal=True):
        """
        Enables or disables certain controls based on whether the clicker is running (for "Click to Toggle").
        """
        state = "normal" if normal else "disabled"
        self.cps_entry.configure(state=state)
        self.interval_slider.configure(state=state)
        self.type_menu.configure(state=state)
        self.change_hotkey_btn.configure(state=state)
        self.hotkey_mode_menu.configure(state=state)
        self.stop_after_checkbox.configure(state=state)
        self.stop_after_entry.configure(state=state)
        self.x_entry.configure(state=state)
        self.y_entry.configure(state=state)
        self.use_location_checkbox.configure(state=state)

    # ------------- Run the GUI -------------
    def run(self):
        self.root.mainloop()


# --------------------------------------------------------
# Run the app
# --------------------------------------------------------
if __name__ == "__main__":
    app = BareBonesAutoClicker()
    app.run()
